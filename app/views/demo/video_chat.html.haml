%html
  %head
    %title PeerJS - Video chat example
    %link{:href => "style.css", :rel => "stylesheet"}/
    %script{:src => "http://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js", :type => "text/javascript"}
    %script{:src => "http://cdn.peerjs.com/0.3/peer.js", :type => "text/javascript"}
    :javascript
      // Compatibility shim
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

      // PeerJS object
      var peer = new Peer({ key: 'plax5iwxnqpmygb9', debug: 3, config: {'iceServers': [
        {url:'stun:stun01.sipphone.com'},
        {url:'stun:stun.ekiga.net'},
        {url:'stun:stun.fwdnet.net'},
        {url:'stun:stun.ideasip.com'},
        {url:'stun:stun.iptel.org'},
        {url:'stun:stun.rixtelecom.se'},
        {url:'stun:stun.schlund.de'},
        {url:'stun:stun.l.google.com:19302'},
        {url:'stun:stun1.l.google.com:19302'},
        {url:'stun:stun2.l.google.com:19302'},
        {url:'stun:stun3.l.google.com:19302'},
        {url:'stun:stun4.l.google.com:19302'},
        {url:'stun:stunserver.org'},
        {url:'stun:stun.softjoys.com'},
        {url:'stun:stun.voiparound.com'},
        {url:'stun:stun.voipbuster.com'},
        {url:'stun:stun.voipstunt.com'},
        {url:'stun:stun.voxgratia.org'},
        {url:'stun:stun.xten.com'},
        {
          url: 'turn:numb.viagenie.ca',
          credential: 'muazkh',
          username: 'webrtc@live.com'
        },
        {
          url: 'turn:192.158.29.39:3478?transport=udp',
          credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
          username: '28224511:1379330808'
        },
        {
          url: 'turn:192.158.29.39:3478?transport=tcp',
          credential: 'JZEOEt2V3Qb0y27GRntt2u2PAYA=',
          username: '28224511:1379330808'
        }]
      }});

      peer.on('open', function(){
        $('#my-id').text(peer.id);
      });

      // Receiving a call
      peer.on('call', function(call){
        // Answer the call automatically (instead of prompting user) for demo purposes
        call.answer(window.localStream);
        step3(call);
      });
      peer.on('error', function(err){
        alert(err.message);
        // Return to step 2 if error occurs
        step2();
      });

      // Click handlers setup
      $(function(){
        $('#make-call').click(function(){
          // Initiate a call!
          var call = peer.call($('#callto-id').val(), window.localStream);

          step3(call);
        });

        $('#end-call').click(function(){
          window.existingCall.close();
          step2();
        });

        // Retry if getUserMedia fails
        $('#step1-retry').click(function(){
          $('#step1-error').hide();
          step1();
        });

        // Get things started
        step1();
      });

      function step1 () {
        // Get audio/video stream
        navigator.getUserMedia({audio: true, video: true}, function(stream){
          // Set your video displays
          $('#my-video').prop('src', URL.createObjectURL(stream));

          window.localStream = stream;
          step2();
        }, function(){ $('#step1-error').show(); });
      }

      function step2 () {
        $('#step1, #step3').hide();
        $('#step2').show();
      }

      function step3 (call) {
        // Hang up on an existing call if present
        if (window.existingCall) {
          window.existingCall.close();
        }

        // Wait for stream on the call, then set peer video display
        call.on('stream', function(stream){
          $('#their-video').prop('src', URL.createObjectURL(stream));
        });

        // UI stuff
        window.existingCall = call;
        $('#their-id').text(call.peer);
        call.on('close', step2);
        $('#step1, #step2').hide();
        $('#step3').show();
      }
  %body
    .pure-g
      / Video area
      #video-container.pure-u-2-3
        %video#their-video{:autoplay => ""}
        %video#my-video{:autoplay => "", :muted => "true"}
      / Steps
      .pure-u-1-3
        %h2 PeerJS Video Chat
        / Get local audio/video stream
        #step1
          %p Please click `allow` on the top of the screen so we can access your webcam and microphone for calls.
          #step1-error
            %p Failed to access the webcam and microphone. Make sure to run this demo on an http server and click allow when asked for permission by the browser.
            %a#step1-retry.pure-button.pure-button-error{:href => "#"} Try again
        / Make calls to others
        #step2
          %p
            Your id:
            %span#my-id ...
          %p Share this id with others so they can call you.
          %h3 Make a call
          .pure-form
            %input#callto-id{:placeholder => "Call user id...", :type => "text"}/
            %a#make-call.pure-button.pure-button-success{:href => "#"} Call
        / Call in progress
        #step3
          %p
            Currently in call with
            %span#their-id ...
          %p
            %a#end-call.pure-button.pure-button-error{:href => "#"} End call
